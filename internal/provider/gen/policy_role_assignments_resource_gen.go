// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package gen

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func PolicyRoleAssignmentsResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"assignments": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"principal_id": schema.StringAttribute{
							Required:            true,
							Description:         "The principal id to assign the role to.",
							MarkdownDescription: "The principal id to assign the role to.",
						},
						"resource_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The resource id of the role assignment.",
							MarkdownDescription: "The resource id of the role assignment.",
						},
						"role_definition_id": schema.StringAttribute{
							Required:            true,
							Description:         "The role definition id to assign.",
							MarkdownDescription: "The role definition id to assign.",
						},
						"scope": schema.StringAttribute{
							Required:            true,
							Description:         "The scope of the assignment.",
							MarkdownDescription: "The scope of the assignment.",
						},
					},
					CustomType: AssignmentsType{
						ObjectType: types.ObjectType{
							AttrTypes: AssignmentsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Required: true,
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The id architecture.",
				MarkdownDescription: "The id architecture.",
			},
		},
	}
}

type PolicyRoleAssignmentsModel struct {
	Assignments types.Set    `tfsdk:"assignments"`
	Id          types.String `tfsdk:"id"`
}

var _ basetypes.ObjectTypable = AssignmentsType{}

type AssignmentsType struct {
	basetypes.ObjectType
}

func (t AssignmentsType) Equal(o attr.Type) bool {
	other, ok := o.(AssignmentsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AssignmentsType) String() string {
	return "AssignmentsType"
}

func (t AssignmentsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	principalIdAttribute, ok := attributes["principal_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`principal_id is missing from object`)

		return nil, diags
	}

	principalIdVal, ok := principalIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`principal_id expected to be basetypes.StringValue, was: %T`, principalIdAttribute))
	}

	resourceIdAttribute, ok := attributes["resource_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_id is missing from object`)

		return nil, diags
	}

	resourceIdVal, ok := resourceIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_id expected to be basetypes.StringValue, was: %T`, resourceIdAttribute))
	}

	roleDefinitionIdAttribute, ok := attributes["role_definition_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`role_definition_id is missing from object`)

		return nil, diags
	}

	roleDefinitionIdVal, ok := roleDefinitionIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`role_definition_id expected to be basetypes.StringValue, was: %T`, roleDefinitionIdAttribute))
	}

	scopeAttribute, ok := attributes["scope"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`scope is missing from object`)

		return nil, diags
	}

	scopeVal, ok := scopeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`scope expected to be basetypes.StringValue, was: %T`, scopeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AssignmentsValue{
		PrincipalId:      principalIdVal,
		ResourceId:       resourceIdVal,
		RoleDefinitionId: roleDefinitionIdVal,
		Scope:            scopeVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewAssignmentsValueNull() AssignmentsValue {
	return AssignmentsValue{
		state: attr.ValueStateNull,
	}
}

func NewAssignmentsValueUnknown() AssignmentsValue {
	return AssignmentsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAssignmentsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AssignmentsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AssignmentsValue Attribute Value",
				"While creating a AssignmentsValue value, a missing attribute value was detected. "+
					"A AssignmentsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AssignmentsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AssignmentsValue Attribute Type",
				"While creating a AssignmentsValue value, an invalid attribute value was detected. "+
					"A AssignmentsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AssignmentsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AssignmentsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AssignmentsValue Attribute Value",
				"While creating a AssignmentsValue value, an extra attribute value was detected. "+
					"A AssignmentsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AssignmentsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAssignmentsValueUnknown(), diags
	}

	principalIdAttribute, ok := attributes["principal_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`principal_id is missing from object`)

		return NewAssignmentsValueUnknown(), diags
	}

	principalIdVal, ok := principalIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`principal_id expected to be basetypes.StringValue, was: %T`, principalIdAttribute))
	}

	resourceIdAttribute, ok := attributes["resource_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_id is missing from object`)

		return NewAssignmentsValueUnknown(), diags
	}

	resourceIdVal, ok := resourceIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_id expected to be basetypes.StringValue, was: %T`, resourceIdAttribute))
	}

	roleDefinitionIdAttribute, ok := attributes["role_definition_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`role_definition_id is missing from object`)

		return NewAssignmentsValueUnknown(), diags
	}

	roleDefinitionIdVal, ok := roleDefinitionIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`role_definition_id expected to be basetypes.StringValue, was: %T`, roleDefinitionIdAttribute))
	}

	scopeAttribute, ok := attributes["scope"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`scope is missing from object`)

		return NewAssignmentsValueUnknown(), diags
	}

	scopeVal, ok := scopeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`scope expected to be basetypes.StringValue, was: %T`, scopeAttribute))
	}

	if diags.HasError() {
		return NewAssignmentsValueUnknown(), diags
	}

	return AssignmentsValue{
		PrincipalId:      principalIdVal,
		ResourceId:       resourceIdVal,
		RoleDefinitionId: roleDefinitionIdVal,
		Scope:            scopeVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewAssignmentsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AssignmentsValue {
	object, diags := NewAssignmentsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAssignmentsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AssignmentsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAssignmentsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAssignmentsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAssignmentsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAssignmentsValueMust(AssignmentsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AssignmentsType) ValueType(ctx context.Context) attr.Value {
	return AssignmentsValue{}
}

var _ basetypes.ObjectValuable = AssignmentsValue{}

type AssignmentsValue struct {
	PrincipalId      basetypes.StringValue `tfsdk:"principal_id"`
	ResourceId       basetypes.StringValue `tfsdk:"resource_id"`
	RoleDefinitionId basetypes.StringValue `tfsdk:"role_definition_id"`
	Scope            basetypes.StringValue `tfsdk:"scope"`
	state            attr.ValueState
}

func (v AssignmentsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["principal_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["resource_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["role_definition_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["scope"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.PrincipalId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["principal_id"] = val

		val, err = v.ResourceId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["resource_id"] = val

		val, err = v.RoleDefinitionId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["role_definition_id"] = val

		val, err = v.Scope.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["scope"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AssignmentsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AssignmentsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AssignmentsValue) String() string {
	return "AssignmentsValue"
}

func (v AssignmentsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"principal_id":       basetypes.StringType{},
		"resource_id":        basetypes.StringType{},
		"role_definition_id": basetypes.StringType{},
		"scope":              basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"principal_id":       v.PrincipalId,
			"resource_id":        v.ResourceId,
			"role_definition_id": v.RoleDefinitionId,
			"scope":              v.Scope,
		})

	return objVal, diags
}

func (v AssignmentsValue) Equal(o attr.Value) bool {
	other, ok := o.(AssignmentsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.PrincipalId.Equal(other.PrincipalId) {
		return false
	}

	if !v.ResourceId.Equal(other.ResourceId) {
		return false
	}

	if !v.RoleDefinitionId.Equal(other.RoleDefinitionId) {
		return false
	}

	if !v.Scope.Equal(other.Scope) {
		return false
	}

	return true
}

func (v AssignmentsValue) Type(ctx context.Context) attr.Type {
	return AssignmentsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AssignmentsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"principal_id":       basetypes.StringType{},
		"resource_id":        basetypes.StringType{},
		"role_definition_id": basetypes.StringType{},
		"scope":              basetypes.StringType{},
	}
}
